// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	setting "clustron-backend/internal/setting"

	uuid "github.com/google/uuid"
)

// SettingStore is an autogenerated mock type for the SettingStore type
type SettingStore struct {
	mock.Mock
}

// GetSettingByUserID provides a mock function with given fields: ctx, userID
func (_m *SettingStore) GetSettingByUserID(ctx context.Context, userID uuid.UUID) (setting.Setting, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetSettingByUserID")
	}

	var r0 setting.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (setting.Setting, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) setting.Setting); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(setting.Setting)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSettingStore creates a new instance of SettingStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSettingStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *SettingStore {
	mock := &SettingStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
