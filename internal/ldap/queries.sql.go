// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package ldap

import (
	"context"
)

const getAllGidNumbers = `-- name: GetAllGidNumbers :many
SELECT number FROM ldap_numbers WHERE type = 'group' ORDER BY number
`

func (q *Queries) GetAllGidNumbers(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getAllGidNumbers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var number int32
		if err := rows.Scan(&number); err != nil {
			return nil, err
		}
		items = append(items, number)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUidNumbers = `-- name: GetAllUidNumbers :many
SELECT number FROM ldap_numbers WHERE type = 'user' ORDER BY number
`

func (q *Queries) GetAllUidNumbers(ctx context.Context) ([]int32, error) {
	rows, err := q.db.Query(ctx, getAllUidNumbers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var number int32
		if err := rows.Scan(&number); err != nil {
			return nil, err
		}
		items = append(items, number)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertGidNumber = `-- name: InsertGidNumber :exec
INSERT INTO ldap_numbers (number, type) VALUES ($1, 'group')
`

func (q *Queries) InsertGidNumber(ctx context.Context, number int32) error {
	_, err := q.db.Exec(ctx, insertGidNumber, number)
	return err
}

const insertUidNumber = `-- name: InsertUidNumber :exec
INSERT INTO ldap_numbers (number, type) VALUES ($1, 'user')
`

func (q *Queries) InsertUidNumber(ctx context.Context, number int32) error {
	_, err := q.db.Exec(ctx, insertUidNumber, number)
	return err
}
