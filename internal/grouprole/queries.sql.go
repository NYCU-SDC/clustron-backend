// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package grouprole

import (
	"context"

	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO group_role (role, access_level) VALUES ($1, $2) RETURNING id, role, access_level
`

type CreateParams struct {
	Role        string
	AccessLevel string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (GroupRole, error) {
	row := q.db.QueryRow(ctx, create, arg.Role, arg.AccessLevel)
	var i GroupRole
	err := row.Scan(&i.ID, &i.Role, &i.AccessLevel)
	return i, err
}

const createWithID = `-- name: CreateWithID :one
INSERT INTO group_role (id, role, access_level) VALUES ($1, $2, $3) RETURNING id, role, access_level
`

type CreateWithIDParams struct {
	ID          uuid.UUID
	Role        string
	AccessLevel string
}

func (q *Queries) CreateWithID(ctx context.Context, arg CreateWithIDParams) (GroupRole, error) {
	row := q.db.QueryRow(ctx, createWithID, arg.ID, arg.Role, arg.AccessLevel)
	var i GroupRole
	err := row.Scan(&i.ID, &i.Role, &i.AccessLevel)
	return i, err
}

const delete = `-- name: Delete :exec
DELETE FROM group_role WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, role, access_level FROM group_role
`

func (q *Queries) GetAll(ctx context.Context) ([]GroupRole, error) {
	rows, err := q.db.Query(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupRole
	for rows.Next() {
		var i GroupRole
		if err := rows.Scan(&i.ID, &i.Role, &i.AccessLevel); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupRoleByID = `-- name: GetGroupRoleByID :one
SELECT id, role, access_level FROM group_role WHERE id = $1
`

func (q *Queries) GetGroupRoleByID(ctx context.Context, id uuid.UUID) (GroupRole, error) {
	row := q.db.QueryRow(ctx, getGroupRoleByID, id)
	var i GroupRole
	err := row.Scan(&i.ID, &i.Role, &i.AccessLevel)
	return i, err
}

const getGroupRoleByName = `-- name: GetGroupRoleByName :one
SELECT id, role, access_level FROM group_role WHERE role = $1
`

func (q *Queries) GetGroupRoleByName(ctx context.Context, role string) (GroupRole, error) {
	row := q.db.QueryRow(ctx, getGroupRoleByName, role)
	var i GroupRole
	err := row.Scan(&i.ID, &i.Role, &i.AccessLevel)
	return i, err
}

const getUserGroupRole = `-- name: GetUserGroupRole :one
SELECT gr.id, gr.role, gr.access_level FROM group_role AS gr JOIN memberships AS m ON m.role_id = gr.id WHERE m.user_id = $1 AND m.group_id = $2
`

type GetUserGroupRoleParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) GetUserGroupRole(ctx context.Context, arg GetUserGroupRoleParams) (GroupRole, error) {
	row := q.db.QueryRow(ctx, getUserGroupRole, arg.UserID, arg.GroupID)
	var i GroupRole
	err := row.Scan(&i.ID, &i.Role, &i.AccessLevel)
	return i, err
}

const update = `-- name: Update :one
UPDATE group_role SET role = $1, access_level = $2 WHERE id = $3 RETURNING id, role, access_level
`

type UpdateParams struct {
	Role        string
	AccessLevel string
	ID          uuid.UUID
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (GroupRole, error) {
	row := q.db.QueryRow(ctx, update, arg.Role, arg.AccessLevel, arg.ID)
	var i GroupRole
	err := row.Scan(&i.ID, &i.Role, &i.AccessLevel)
	return i, err
}
