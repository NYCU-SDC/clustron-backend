// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package setting

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addPublicKey = `-- name: AddPublicKey :one
INSERT INTO public_keys (user_id, keyname, public_key) VALUES ($1, $2, $3) RETURNING user_id, keyname, public_key
`

type AddPublicKeyParams struct {
	UserID    uuid.UUID
	Keyname   string
	PublicKey string
}

func (q *Queries) AddPublicKey(ctx context.Context, arg AddPublicKeyParams) (PublicKey, error) {
	row := q.db.QueryRow(ctx, addPublicKey, arg.UserID, arg.Keyname, arg.PublicKey)
	var i PublicKey
	err := row.Scan(&i.UserID, &i.Keyname, &i.PublicKey)
	return i, err
}

const deletePublicKey = `-- name: DeletePublicKey :exec
DELETE FROM public_keys WHERE user_id = $1 AND keyname = $2
`

type DeletePublicKeyParams struct {
	UserID  uuid.UUID
	Keyname string
}

func (q *Queries) DeletePublicKey(ctx context.Context, arg DeletePublicKeyParams) error {
	_, err := q.db.Exec(ctx, deletePublicKey, arg.UserID, arg.Keyname)
	return err
}

const getPublicKeys = `-- name: GetPublicKeys :many
SELECT user_id, keyname, public_key FROM public_keys WHERE user_id = $1
`

func (q *Queries) GetPublicKeys(ctx context.Context, userID uuid.UUID) ([]PublicKey, error) {
	rows, err := q.db.Query(ctx, getPublicKeys, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PublicKey
	for rows.Next() {
		var i PublicKey
		if err := rows.Scan(&i.UserID, &i.Keyname, &i.PublicKey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSetting = `-- name: GetSetting :one
SELECT user_id, username, linux_username FROM settings WHERE user_id = $1
`

func (q *Queries) GetSetting(ctx context.Context, userID uuid.UUID) (Setting, error) {
	row := q.db.QueryRow(ctx, getSetting, userID)
	var i Setting
	err := row.Scan(&i.UserID, &i.Username, &i.LinuxUsername)
	return i, err
}

const updateSetting = `-- name: UpdateSetting :one
UPDATE settings SET username = $2, linux_username = $3 WHERE user_id = $1 RETURNING user_id, username, linux_username
`

type UpdateSettingParams struct {
	UserID        uuid.UUID
	Username      string
	LinuxUsername pgtype.Text
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) (Setting, error) {
	row := q.db.QueryRow(ctx, updateSetting, arg.UserID, arg.Username, arg.LinuxUsername)
	var i Setting
	err := row.Scan(&i.UserID, &i.Username, &i.LinuxUsername)
	return i, err
}
