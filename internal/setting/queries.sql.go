// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package setting

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPublicKey = `-- name: CreatePublicKey :one
INSERT INTO public_keys (user_id, title, public_key) VALUES ($1, $2, $3) RETURNING id, user_id, title, public_key
`

type CreatePublicKeyParams struct {
	UserID    uuid.UUID
	Title     string
	PublicKey string
}

func (q *Queries) CreatePublicKey(ctx context.Context, arg CreatePublicKeyParams) (PublicKey, error) {
	row := q.db.QueryRow(ctx, createPublicKey, arg.UserID, arg.Title, arg.PublicKey)
	var i PublicKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.PublicKey,
	)
	return i, err
}

const createSetting = `-- name: CreateSetting :one
INSERT INTO settings (user_id, full_name, linux_username) VALUES ($1, $2, '') RETURNING user_id, full_name, linux_username
`

type CreateSettingParams struct {
	UserID   uuid.UUID
	FullName pgtype.Text
}

func (q *Queries) CreateSetting(ctx context.Context, arg CreateSettingParams) (Setting, error) {
	row := q.db.QueryRow(ctx, createSetting, arg.UserID, arg.FullName)
	var i Setting
	err := row.Scan(&i.UserID, &i.FullName, &i.LinuxUsername)
	return i, err
}

const deletePublicKey = `-- name: DeletePublicKey :exec
DELETE FROM public_keys WHERE id = $1
`

func (q *Queries) DeletePublicKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePublicKey, id)
	return err
}

const existByLinuxUsername = `-- name: ExistByLinuxUsername :one
SELECT EXISTS (SELECT 1 FROM settings WHERE linux_username = $1) AS exists
`

func (q *Queries) ExistByLinuxUsername(ctx context.Context, linuxUsername pgtype.Text) (bool, error) {
	row := q.db.QueryRow(ctx, existByLinuxUsername, linuxUsername)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const existByUserID = `-- name: ExistByUserID :one
SELECT EXISTS (SELECT 1 FROM settings WHERE user_id = $1) AS exists
`

func (q *Queries) ExistByUserID(ctx context.Context, userID uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, existByUserID, userID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getPublicKey = `-- name: GetPublicKey :one
SELECT id, user_id, title, public_key FROM public_keys WHERE id = $1
`

func (q *Queries) GetPublicKey(ctx context.Context, id uuid.UUID) (PublicKey, error) {
	row := q.db.QueryRow(ctx, getPublicKey, id)
	var i PublicKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.PublicKey,
	)
	return i, err
}

const getPublicKeys = `-- name: GetPublicKeys :many
SELECT id, user_id, title, public_key FROM public_keys WHERE user_id = $1
`

func (q *Queries) GetPublicKeys(ctx context.Context, userID uuid.UUID) ([]PublicKey, error) {
	rows, err := q.db.Query(ctx, getPublicKeys, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PublicKey
	for rows.Next() {
		var i PublicKey
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.PublicKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSetting = `-- name: GetSetting :one
SELECT user_id, full_name, linux_username FROM settings WHERE user_id = $1
`

func (q *Queries) GetSetting(ctx context.Context, userID uuid.UUID) (Setting, error) {
	row := q.db.QueryRow(ctx, getSetting, userID)
	var i Setting
	err := row.Scan(&i.UserID, &i.FullName, &i.LinuxUsername)
	return i, err
}

const updateSetting = `-- name: UpdateSetting :one
UPDATE settings SET full_name = $2, linux_username = $3 WHERE user_id = $1 RETURNING user_id, full_name, linux_username
`

type UpdateSettingParams struct {
	UserID        uuid.UUID
	FullName      pgtype.Text
	LinuxUsername pgtype.Text
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) (Setting, error) {
	row := q.db.QueryRow(ctx, updateSetting, arg.UserID, arg.FullName, arg.LinuxUsername)
	var i Setting
	err := row.Scan(&i.UserID, &i.FullName, &i.LinuxUsername)
	return i, err
}
