// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	setting "github.com/NYCU-SDC/clustron-backend/internal/setting"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddPublicKey provides a mock function with given fields: ctx, publicKey
func (_m *Store) AddPublicKey(ctx context.Context, publicKey setting.AddPublicKeyParams) (setting.PublicKey, error) {
	ret := _m.Called(ctx, publicKey)

	if len(ret) == 0 {
		panic("no return value specified for AddPublicKey")
	}

	var r0 setting.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, setting.AddPublicKeyParams) (setting.PublicKey, error)); ok {
		return rf(ctx, publicKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, setting.AddPublicKeyParams) setting.PublicKey); ok {
		r0 = rf(ctx, publicKey)
	} else {
		r0 = ret.Get(0).(setting.PublicKey)
	}

	if rf, ok := ret.Get(1).(func(context.Context, setting.AddPublicKeyParams) error); ok {
		r1 = rf(ctx, publicKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePublicKey provides a mock function with given fields: ctx, id
func (_m *Store) DeletePublicKey(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePublicKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPublicKeyById provides a mock function with given fields: ctx, id
func (_m *Store) GetPublicKeyById(ctx context.Context, id uuid.UUID) (setting.PublicKey, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKeyById")
	}

	var r0 setting.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (setting.PublicKey, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) setting.PublicKey); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(setting.PublicKey)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicKeysByUserId provides a mock function with given fields: ctx, userId
func (_m *Store) GetPublicKeysByUserId(ctx context.Context, userId uuid.UUID) ([]setting.PublicKey, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKeysByUserId")
	}

	var r0 []setting.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]setting.PublicKey, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []setting.PublicKey); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]setting.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSettingByUserId provides a mock function with given fields: ctx, userId
func (_m *Store) GetSettingByUserId(ctx context.Context, userId uuid.UUID) (setting.Setting, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetSettingByUserId")
	}

	var r0 setting.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (setting.Setting, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) setting.Setting); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(setting.Setting)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSetting provides a mock function with given fields: ctx, userId, _a2
func (_m *Store) UpdateSetting(ctx context.Context, userId uuid.UUID, _a2 setting.Setting) (setting.Setting, error) {
	ret := _m.Called(ctx, userId, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSetting")
	}

	var r0 setting.Setting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, setting.Setting) (setting.Setting, error)); ok {
		return rf(ctx, userId, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, setting.Setting) setting.Setting); ok {
		r0 = rf(ctx, userId, _a2)
	} else {
		r0 = ret.Get(0).(setting.Setting)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, setting.Setting) error); ok {
		r1 = rf(ctx, userId, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
