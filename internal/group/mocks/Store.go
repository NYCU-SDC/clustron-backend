// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	group "github.com/NYCU-SDC/clustron-backend/internal/group"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// ArchiveGroup provides a mock function with given fields: ctx, groupId
func (_m *Store) ArchiveGroup(ctx context.Context, groupId uuid.UUID) (group.Group, error) {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ArchiveGroup")
	}

	var r0 group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (group.Group, error)); ok {
		return rf(ctx, groupId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) group.Group); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: ctx, _a1
func (_m *Store) CreateGroup(ctx context.Context, _a1 group.CreateParams) (group.Group, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, group.CreateParams) (group.Group, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, group.CreateParams) group.Group); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, group.CreateParams) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserGroupById provides a mock function with given fields: ctx, userId, groupId
func (_m *Store) FindUserGroupById(ctx context.Context, userId uuid.UUID, groupId uuid.UUID) (group.Group, error) {
	ret := _m.Called(ctx, userId, groupId)

	if len(ret) == 0 {
		panic("no return value specified for FindUserGroupById")
	}

	var r0 group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (group.Group, error)); ok {
		return rf(ctx, userId, groupId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) group.Group); ok {
		r0 = rf(ctx, userId, groupId)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userId, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, page, size, sort, sortBy
func (_m *Store) GetAll(ctx context.Context, page int, size int, sort string, sortBy string) ([]group.Group, error) {
	ret := _m.Called(ctx, page, size, sort, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) ([]group.Group, error)); ok {
		return rf(ctx, page, size, sort, sortBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) []group.Group); ok {
		r0 = rf(ctx, page, size, sort, sortBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]group.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string, string) error); ok {
		r1 = rf(ctx, page, size, sort, sortBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGroupCount provides a mock function with given fields: ctx
func (_m *Store) GetAllGroupCount(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroupCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, groupId
func (_m *Store) GetById(ctx context.Context, groupId uuid.UUID) (group.Group, error) {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (group.Group, error)); ok {
		return rf(ctx, groupId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) group.Group); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserId provides a mock function with given fields: ctx, userId, page, size, sort, sortBy
func (_m *Store) GetByUserId(ctx context.Context, userId uuid.UUID, page int, size int, sort string, sortBy string) ([]group.Group, []group.GroupRole, error) {
	ret := _m.Called(ctx, userId, page, size, sort, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserId")
	}

	var r0 []group.Group
	var r1 []group.GroupRole
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int, string, string) ([]group.Group, []group.GroupRole, error)); ok {
		return rf(ctx, userId, page, size, sort, sortBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int, string, string) []group.Group); ok {
		r0 = rf(ctx, userId, page, size, sort, sortBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]group.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int, string, string) []group.GroupRole); ok {
		r1 = rf(ctx, userId, page, size, sort, sortBy)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]group.GroupRole)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, int, int, string, string) error); ok {
		r2 = rf(ctx, userId, page, size, sort, sortBy)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserAllMembership provides a mock function with given fields: ctx, userId
func (_m *Store) GetUserAllMembership(ctx context.Context, userId uuid.UUID) ([]group.GetUserAllMembershipRow, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAllMembership")
	}

	var r0 []group.GetUserAllMembershipRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]group.GetUserAllMembershipRow, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []group.GetUserAllMembershipRow); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]group.GetUserAllMembershipRow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGroupsCount provides a mock function with given fields: ctx, userId
func (_m *Store) GetUserGroupsCount(ctx context.Context, userId uuid.UUID) (int, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGroupsCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnarchiveGroup provides a mock function with given fields: ctx, groupId
func (_m *Store) UnarchiveGroup(ctx context.Context, groupId uuid.UUID) (group.Group, error) {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for UnarchiveGroup")
	}

	var r0 group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (group.Group, error)); ok {
		return rf(ctx, groupId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) group.Group); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
