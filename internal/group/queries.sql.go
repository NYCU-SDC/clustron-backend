// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package group

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addGroupMember = `-- name: AddGroupMember :one
INSERT INTO memberships (group_id, user_id, role_id)
VALUES ($1, $2, $3)
RETURNING user_id, group_id, role_id, created_at, updated_at
`

type AddGroupMemberParams struct {
	GroupID uuid.UUID
	UserID  uuid.UUID
	RoleID  uuid.UUID
}

func (q *Queries) AddGroupMember(ctx context.Context, arg AddGroupMemberParams) (Membership, error) {
	row := q.db.QueryRow(ctx, addGroupMember, arg.GroupID, arg.UserID, arg.RoleID)
	var i Membership
	err := row.Scan(
		&i.UserID,
		&i.GroupID,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const archive = `-- name: Archive :one
UPDATE groups SET is_archived = TRUE, updated_at = CURRENT_TIMESTAMP WHERE id = $1 RETURNING id, title, description, is_archived, gid_number, created_at, updated_at
`

func (q *Queries) Archive(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, archive, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.GidNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countAll = `-- name: CountAll :one
SELECT COUNT(*) FROM groups
`

func (q *Queries) CountAll(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAll)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countByUser = `-- name: CountByUser :one
SELECT COUNT(*) FROM memberships WHERE user_id = $1
`

func (q *Queries) CountByUser(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const create = `-- name: Create :one
INSERT INTO groups (title, description) VALUES ($1, $2) RETURNING id, title, description, is_archived, gid_number, created_at, updated_at
`

type CreateParams struct {
	Title       string
	Description pgtype.Text
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Group, error) {
	row := q.db.QueryRow(ctx, create, arg.Title, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.GidNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO group_role (role, access_level)
VALUES ($1, $2)
RETURNING id, role, access_level
`

type CreateRoleParams struct {
	Role        string
	AccessLevel string
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (GroupRole, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Role, arg.AccessLevel)
	var i GroupRole
	err := row.Scan(&i.ID, &i.Role, &i.AccessLevel)
	return i, err
}

const createWithID = `-- name: CreateWithID :one
INSERT INTO groups (id, title, description) VALUES ($1, $2, $3) RETURNING id, title, description, is_archived, gid_number, created_at, updated_at
`

type CreateWithIDParams struct {
	ID          uuid.UUID
	Title       string
	Description pgtype.Text
}

func (q *Queries) CreateWithID(ctx context.Context, arg CreateWithIDParams) (Group, error) {
	row := q.db.QueryRow(ctx, createWithID, arg.ID, arg.Title, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.GidNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePendingGroupMember = `-- name: DeletePendingGroupMember :exec
DELETE FROM pending_memberships
WHERE user_identifier = $1 AND group_id = $2
`

type DeletePendingGroupMemberParams struct {
	UserIdentifier string
	GroupID        uuid.UUID
}

func (q *Queries) DeletePendingGroupMember(ctx context.Context, arg DeletePendingGroupMemberParams) error {
	_, err := q.db.Exec(ctx, deletePendingGroupMember, arg.UserIdentifier, arg.GroupID)
	return err
}

const get = `-- name: Get :one
SELECT id, title, description, is_archived, gid_number, created_at, updated_at FROM groups WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.GidNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIfMember = `-- name: GetIfMember :one
SELECT g.id, g.title, g.description, g.is_archived, g.gid_number, g.created_at, g.updated_at FROM groups AS g JOIN memberships AS m ON m.group_id = g.id WHERE m.user_id = $1 AND m.group_id = $2
`

type GetIfMemberParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) GetIfMember(ctx context.Context, arg GetIfMemberParams) (Group, error) {
	row := q.db.QueryRow(ctx, getIfMember, arg.UserID, arg.GroupID)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.GidNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMembershipByUser = `-- name: GetMembershipByUser :one
SELECT
    m.group_id,
    m.role_id,
    gr.role,
    gr.access_level
FROM
    memberships AS m
JOIN
    group_role AS gr ON gr.id = m.role_id
WHERE
    user_id = $1 AND group_id = $2
`

type GetMembershipByUserParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

type GetMembershipByUserRow struct {
	GroupID     uuid.UUID
	RoleID      uuid.UUID
	Role        string
	AccessLevel string
}

func (q *Queries) GetMembershipByUser(ctx context.Context, arg GetMembershipByUserParams) (GetMembershipByUserRow, error) {
	row := q.db.QueryRow(ctx, getMembershipByUser, arg.UserID, arg.GroupID)
	var i GetMembershipByUserRow
	err := row.Scan(
		&i.GroupID,
		&i.RoleID,
		&i.Role,
		&i.AccessLevel,
	)
	return i, err
}

const getPendingGroupMember = `-- name: GetPendingGroupMember :one
SELECT id, user_identifier, group_id, role_id, created_at, updated_at
FROM pending_memberships
WHERE user_identifier = $1 AND group_id = $2
`

type GetPendingGroupMemberParams struct {
	UserIdentifier string
	GroupID        uuid.UUID
}

func (q *Queries) GetPendingGroupMember(ctx context.Context, arg GetPendingGroupMemberParams) (PendingMembership, error) {
	row := q.db.QueryRow(ctx, getPendingGroupMember, arg.UserIdentifier, arg.GroupID)
	var i PendingMembership
	err := row.Scan(
		&i.ID,
		&i.UserIdentifier,
		&i.GroupID,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleIdByGroupAndUser = `-- name: GetRoleIdByGroupAndUser :one
SELECT role_id
FROM memberships
WHERE group_id = $1 AND user_id = $2
`

type GetRoleIdByGroupAndUserParams struct {
	GroupID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) GetRoleIdByGroupAndUser(ctx context.Context, arg GetRoleIdByGroupAndUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getRoleIdByGroupAndUser, arg.GroupID, arg.UserID)
	var role_id uuid.UUID
	err := row.Scan(&role_id)
	return role_id, err
}

const listAscPaged = `-- name: ListAscPaged :many
SELECT id, title, description, is_archived, gid_number, created_at, updated_at FROM groups ORDER BY $1::text ASC LIMIT $3 OFFSET $2
`

type ListAscPagedParams struct {
	Sortby string
	Page   int32
	Size   int32
}

func (q *Queries) ListAscPaged(ctx context.Context, arg ListAscPagedParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, listAscPaged, arg.Sortby, arg.Page, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsArchived,
			&i.GidNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDescPaged = `-- name: ListDescPaged :many
SELECT id, title, description, is_archived, gid_number, created_at, updated_at FROM groups ORDER BY $1::text DESC LIMIT $3 OFFSET $2
`

type ListDescPagedParams struct {
	Sortby string
	Page   int32
	Size   int32
}

func (q *Queries) ListDescPaged(ctx context.Context, arg ListDescPagedParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, listDescPaged, arg.Sortby, arg.Page, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsArchived,
			&i.GidNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGidNumbers = `-- name: ListGidNumbers :many
SELECT gid_number FROM groups WHERE gid_number IS NOT NULL ORDER BY gid_number
`

func (q *Queries) ListGidNumbers(ctx context.Context) ([]pgtype.Int4, error) {
	rows, err := q.db.Query(ctx, listGidNumbers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Int4
	for rows.Next() {
		var gid_number pgtype.Int4
		if err := rows.Scan(&gid_number); err != nil {
			return nil, err
		}
		items = append(items, gid_number)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupMembersAscPaged = `-- name: ListGroupMembersAscPaged :many
SELECT user_id, group_id, role_id, created_at, updated_at
FROM memberships
WHERE group_id = $1
ORDER BY $2::text ASC
LIMIT $4 OFFSET $3
`

type ListGroupMembersAscPagedParams struct {
	GroupID uuid.UUID
	Sortby  string
	Page    int32
	Size    int32
}

func (q *Queries) ListGroupMembersAscPaged(ctx context.Context, arg ListGroupMembersAscPagedParams) ([]Membership, error) {
	rows, err := q.db.Query(ctx, listGroupMembersAscPaged,
		arg.GroupID,
		arg.Sortby,
		arg.Page,
		arg.Size,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.UserID,
			&i.GroupID,
			&i.RoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupMembersDescPaged = `-- name: ListGroupMembersDescPaged :many
SELECT user_id, group_id, role_id, created_at, updated_at
FROM memberships
WHERE group_id = $1
ORDER BY $2::text DESC
LIMIT $4 OFFSET $3
`

type ListGroupMembersDescPagedParams struct {
	GroupID uuid.UUID
	Sortby  string
	Page    int32
	Size    int32
}

func (q *Queries) ListGroupMembersDescPaged(ctx context.Context, arg ListGroupMembersDescPagedParams) ([]Membership, error) {
	rows, err := q.db.Query(ctx, listGroupMembersDescPaged,
		arg.GroupID,
		arg.Sortby,
		arg.Page,
		arg.Size,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Membership
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.UserID,
			&i.GroupID,
			&i.RoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIfMemberAscPaged = `-- name: ListIfMemberAscPaged :many
SELECT
    g.id, g.title, g.description, g.is_archived, g.gid_number, g.created_at, g.updated_at,
    gr.id, gr.role, gr.access_level
FROM
    groups AS g
JOIN
    memberships AS m ON m.group_id = g.id
JOIN
    group_role AS gr ON gr.id = m.role_id
WHERE
    m.user_id = $1
ORDER BY
    $2::text ASC LIMIT $4 OFFSET $3
`

type ListIfMemberAscPagedParams struct {
	UserID uuid.UUID
	Sortby string
	Page   int32
	Size   int32
}

type ListIfMemberAscPagedRow struct {
	ID          uuid.UUID
	Title       string
	Description pgtype.Text
	IsArchived  pgtype.Bool
	GidNumber   pgtype.Int4
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	ID_2        uuid.UUID
	Role        string
	AccessLevel string
}

func (q *Queries) ListIfMemberAscPaged(ctx context.Context, arg ListIfMemberAscPagedParams) ([]ListIfMemberAscPagedRow, error) {
	rows, err := q.db.Query(ctx, listIfMemberAscPaged,
		arg.UserID,
		arg.Sortby,
		arg.Page,
		arg.Size,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListIfMemberAscPagedRow
	for rows.Next() {
		var i ListIfMemberAscPagedRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsArchived,
			&i.GidNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Role,
			&i.AccessLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIfMemberDescPaged = `-- name: ListIfMemberDescPaged :many
SELECT
    g.id, g.title, g.description, g.is_archived, g.gid_number, g.created_at, g.updated_at,
    gr.id, gr.role, gr.access_level
FROM
    groups AS g
JOIN
    memberships AS m ON m.group_id = g.id
JOIN
    group_role AS gr ON gr.id = m.role_id
WHERE
    m.user_id = $1
ORDER BY
    $2::text DESC LIMIT $4 OFFSET $3
`

type ListIfMemberDescPagedParams struct {
	UserID uuid.UUID
	Sortby string
	Page   int32
	Size   int32
}

type ListIfMemberDescPagedRow struct {
	ID          uuid.UUID
	Title       string
	Description pgtype.Text
	IsArchived  pgtype.Bool
	GidNumber   pgtype.Int4
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	ID_2        uuid.UUID
	Role        string
	AccessLevel string
}

func (q *Queries) ListIfMemberDescPaged(ctx context.Context, arg ListIfMemberDescPagedParams) ([]ListIfMemberDescPagedRow, error) {
	rows, err := q.db.Query(ctx, listIfMemberDescPaged,
		arg.UserID,
		arg.Sortby,
		arg.Page,
		arg.Size,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListIfMemberDescPagedRow
	for rows.Next() {
		var i ListIfMemberDescPagedRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsArchived,
			&i.GidNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Role,
			&i.AccessLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMembershipsByUser = `-- name: ListMembershipsByUser :many
SELECT
    m.group_id,
    m.role_id,
    gr.role,
    gr.access_level
FROM
    memberships AS m
JOIN
    group_role AS gr ON gr.id = m.role_id
WHERE
    user_id = $1
`

type ListMembershipsByUserRow struct {
	GroupID     uuid.UUID
	RoleID      uuid.UUID
	Role        string
	AccessLevel string
}

func (q *Queries) ListMembershipsByUser(ctx context.Context, userID uuid.UUID) ([]ListMembershipsByUserRow, error) {
	rows, err := q.db.Query(ctx, listMembershipsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMembershipsByUserRow
	for rows.Next() {
		var i ListMembershipsByUserRow
		if err := rows.Scan(
			&i.GroupID,
			&i.RoleID,
			&i.Role,
			&i.AccessLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeGroupMember = `-- name: RemoveGroupMember :exec
DELETE FROM memberships
WHERE group_id = $1 AND user_id = $2
`

type RemoveGroupMemberParams struct {
	GroupID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) RemoveGroupMember(ctx context.Context, arg RemoveGroupMemberParams) error {
	_, err := q.db.Exec(ctx, removeGroupMember, arg.GroupID, arg.UserID)
	return err
}

const unarchive = `-- name: Unarchive :one
UPDATE groups SET is_archived = FALSE, updated_at = CURRENT_TIMESTAMP WHERE id = $1 RETURNING id, title, description, is_archived, gid_number, created_at, updated_at
`

func (q *Queries) Unarchive(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, unarchive, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.GidNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE groups SET title = $2, description = $3, updated_at = CURRENT_TIMESTAMP WHERE id = $1 RETURNING id, title, description, is_archived, gid_number, created_at, updated_at
`

type UpdateParams struct {
	ID          uuid.UUID
	Title       string
	Description pgtype.Text
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Group, error) {
	row := q.db.QueryRow(ctx, update, arg.ID, arg.Title, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.GidNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMembershipRole = `-- name: UpdateMembershipRole :one
UPDATE memberships
SET role_id = $1
WHERE group_id = $2 AND user_id = $3
RETURNING user_id, group_id, role_id, created_at, updated_at
`

type UpdateMembershipRoleParams struct {
	RoleID  uuid.UUID
	GroupID uuid.UUID
	UserID  uuid.UUID
}

func (q *Queries) UpdateMembershipRole(ctx context.Context, arg UpdateMembershipRoleParams) (Membership, error) {
	row := q.db.QueryRow(ctx, updateMembershipRole, arg.RoleID, arg.GroupID, arg.UserID)
	var i Membership
	err := row.Scan(
		&i.UserID,
		&i.GroupID,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
