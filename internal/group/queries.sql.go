// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package group

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const accessLevelFromRole = `-- name: AccessLevelFromRole :one
SELECT access_level FROM group_role WHERE id = $1
`

func (q *Queries) AccessLevelFromRole(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, accessLevelFromRole, id)
	var access_level string
	err := row.Scan(&access_level)
	return access_level, err
}

const archive = `-- name: Archive :one
UPDATE groups SET is_archived = TRUE, updated_at = CURRENT_TIMESTAMP WHERE id = $1 RETURNING id, title, description, is_archived, created_at, updated_at
`

func (q *Queries) Archive(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, archive, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const create = `-- name: Create :one
INSERT INTO groups (title, description) VALUES ($1, $2) RETURNING id, title, description, is_archived, created_at, updated_at
`

type CreateParams struct {
	Title       string
	Description pgtype.Text
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Group, error) {
	row := q.db.QueryRow(ctx, create, arg.Title, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findById = `-- name: FindById :one
SELECT id, title, description, is_archived, created_at, updated_at FROM groups WHERE id = $1
`

func (q *Queries) FindById(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, findById, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findByUserWithPageASC = `-- name: FindByUserWithPageASC :many
SELECT g.id, g.title, g.description, g.is_archived, g.created_at, g.updated_at FROM groups AS g JOIN memberships AS m ON m.group_id = g.id WHERE m.user_id = $1 ORDER BY $2::text ASC LIMIT $4 OFFSET $3
`

type FindByUserWithPageASCParams struct {
	UserID uuid.UUID
	Sortby string
	Page   int32
	Size   int32
}

func (q *Queries) FindByUserWithPageASC(ctx context.Context, arg FindByUserWithPageASCParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, findByUserWithPageASC,
		arg.UserID,
		arg.Sortby,
		arg.Page,
		arg.Size,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsArchived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findByUserWithPageDESC = `-- name: FindByUserWithPageDESC :many
SELECT g.id, g.title, g.description, g.is_archived, g.created_at, g.updated_at FROM groups AS g JOIN memberships AS m ON m.group_id = g.id WHERE m.user_id = $1 ORDER BY $2::text DESC LIMIT $4 OFFSET $3
`

type FindByUserWithPageDESCParams struct {
	UserID uuid.UUID
	Sortby string
	Page   int32
	Size   int32
}

func (q *Queries) FindByUserWithPageDESC(ctx context.Context, arg FindByUserWithPageDESCParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, findByUserWithPageDESC,
		arg.UserID,
		arg.Sortby,
		arg.Page,
		arg.Size,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsArchived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserGroupById = `-- name: FindUserGroupById :one
SELECT g.id, g.title, g.description, g.is_archived, g.created_at, g.updated_at FROM groups AS g JOIN memberships AS m ON m.group_id = g.id WHERE m.user_id = $1 AND m.group_id = $2
`

type FindUserGroupByIdParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) FindUserGroupById(ctx context.Context, arg FindUserGroupByIdParams) (Group, error) {
	row := q.db.QueryRow(ctx, findUserGroupById, arg.UserID, arg.GroupID)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllGroupsCount = `-- name: GetAllGroupsCount :one
SELECT COUNT(*) FROM groups
`

func (q *Queries) GetAllGroupsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAllGroupsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserGroupMembership = `-- name: GetUserGroupMembership :one
SELECT user_id, group_id, role_id, created_at, updated_at FROM memberships WHERE user_id = $1 AND group_id = $2
`

type GetUserGroupMembershipParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) GetUserGroupMembership(ctx context.Context, arg GetUserGroupMembershipParams) (Membership, error) {
	row := q.db.QueryRow(ctx, getUserGroupMembership, arg.UserID, arg.GroupID)
	var i Membership
	err := row.Scan(
		&i.UserID,
		&i.GroupID,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserGroupsCount = `-- name: GetUserGroupsCount :one
SELECT COUNT(*) FROM memberships WHERE user_id = $1
`

func (q *Queries) GetUserGroupsCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getUserGroupsCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWithPageASC = `-- name: GetWithPageASC :many
SELECT id, title, description, is_archived, created_at, updated_at FROM groups ORDER BY $1::text ASC LIMIT $3 OFFSET $2
`

type GetWithPageASCParams struct {
	Sortby string
	Page   int32
	Size   int32
}

func (q *Queries) GetWithPageASC(ctx context.Context, arg GetWithPageASCParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, getWithPageASC, arg.Sortby, arg.Page, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsArchived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWithPageDESC = `-- name: GetWithPageDESC :many
SELECT id, title, description, is_archived, created_at, updated_at FROM groups ORDER BY $1::text DESC LIMIT $3 OFFSET $2
`

type GetWithPageDESCParams struct {
	Sortby string
	Page   int32
	Size   int32
}

func (q *Queries) GetWithPageDESC(ctx context.Context, arg GetWithPageDESCParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, getWithPageDESC, arg.Sortby, arg.Page, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsArchived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unarchive = `-- name: Unarchive :one
UPDATE groups SET is_archived = FALSE, updated_at = CURRENT_TIMESTAMP WHERE id = $1 RETURNING id, title, description, is_archived, created_at, updated_at
`

func (q *Queries) Unarchive(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, unarchive, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE groups SET title = $2, description = $3, updated_at = CURRENT_TIMESTAMP WHERE id = $1 RETURNING id, title, description, is_archived, created_at, updated_at
`

type UpdateParams struct {
	ID          uuid.UUID
	Title       string
	Description pgtype.Text
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Group, error) {
	row := q.db.QueryRow(ctx, update, arg.ID, arg.Title, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
