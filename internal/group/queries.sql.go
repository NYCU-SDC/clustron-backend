// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package group

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const archive = `-- name: Archive :one
UPDATE groups SET is_archived = TRUE WHERE id = $1 RETURNING id, title, description, is_archived, created_at, updated_at
`

func (q *Queries) Archive(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, archive, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const create = `-- name: Create :one
INSERT INTO groups (title, description) VALUES ($1, $2) RETURNING id, title, description, is_archived, created_at, updated_at
`

type CreateParams struct {
	Title       string
	Description pgtype.Text
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Group, error) {
	row := q.db.QueryRow(ctx, create, arg.Title, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findById = `-- name: FindById :one
SELECT id, title, description, is_archived, created_at, updated_at FROM groups WHERE id = $1
`

func (q *Queries) FindById(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, findById, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findByUserIdASC = `-- name: FindByUserIdASC :many
SELECT group_id FROM memberships WHERE user_id = $1 ORDER BY $2::text ASC LIMIT $4 OFFSET $3
`

type FindByUserIdASCParams struct {
	UserID uuid.UUID
	Sortby string
	Page   int32
	Size   int32
}

func (q *Queries) FindByUserIdASC(ctx context.Context, arg FindByUserIdASCParams) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, findByUserIdASC,
		arg.UserID,
		arg.Sortby,
		arg.Page,
		arg.Size,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var group_id uuid.UUID
		if err := rows.Scan(&group_id); err != nil {
			return nil, err
		}
		items = append(items, group_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findByUserIdDESC = `-- name: FindByUserIdDESC :many
SELECT group_id FROM memberships WHERE user_id = $1 ORDER BY $2::text DESC LIMIT $4 OFFSET $3
`

type FindByUserIdDESCParams struct {
	UserID uuid.UUID
	Sortby string
	Page   int32
	Size   int32
}

func (q *Queries) FindByUserIdDESC(ctx context.Context, arg FindByUserIdDESCParams) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, findByUserIdDESC,
		arg.UserID,
		arg.Sortby,
		arg.Page,
		arg.Size,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var group_id uuid.UUID
		if err := rows.Scan(&group_id); err != nil {
			return nil, err
		}
		items = append(items, group_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGroupCount = `-- name: GetAllGroupCount :one
SELECT COUNT(*) FROM groups
`

func (q *Queries) GetAllGroupCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAllGroupCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserGroupCount = `-- name: GetUserGroupCount :one
SELECT COUNT(*) FROM memberships WHERE user_id = $1
`

func (q *Queries) GetUserGroupCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getUserGroupCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWithPageASC = `-- name: GetWithPageASC :many
SELECT id, title, description, is_archived, created_at, updated_at FROM groups ORDER BY $1::text ASC LIMIT $3 OFFSET $2
`

type GetWithPageASCParams struct {
	Sortby string
	Page   int32
	Size   int32
}

func (q *Queries) GetWithPageASC(ctx context.Context, arg GetWithPageASCParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, getWithPageASC, arg.Sortby, arg.Page, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsArchived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWithPageDESC = `-- name: GetWithPageDESC :many
SELECT id, title, description, is_archived, created_at, updated_at FROM groups ORDER BY $1::text DESC LIMIT $3 OFFSET $2
`

type GetWithPageDESCParams struct {
	Sortby string
	Page   int32
	Size   int32
}

func (q *Queries) GetWithPageDESC(ctx context.Context, arg GetWithPageDESCParams) ([]Group, error) {
	rows, err := q.db.Query(ctx, getWithPageDESC, arg.Sortby, arg.Page, arg.Size)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsArchived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unarchive = `-- name: Unarchive :one
UPDATE groups SET is_archived = FALSE WHERE id = $1 RETURNING id, title, description, is_archived, created_at, updated_at
`

func (q *Queries) Unarchive(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, unarchive, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE groups SET title = $2, description = $3 WHERE id = $1 RETURNING id, title, description, is_archived, created_at, updated_at
`

type UpdateParams struct {
	ID          uuid.UUID
	Title       string
	Description pgtype.Text
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Group, error) {
	row := q.db.QueryRow(ctx, update, arg.ID, arg.Title, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsArchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
