// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	jwt "clustron-backend/internal/jwt"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// JWTIssuer is an autogenerated mock type for the JWTIssuer type
type JWTIssuer struct {
	mock.Mock
}

// GenerateRefreshToken provides a mock function with given fields: ctx, user
func (_m *JWTIssuer) GenerateRefreshToken(ctx context.Context, user jwt.User) (jwt.RefreshToken, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 jwt.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, jwt.User) (jwt.RefreshToken, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, jwt.User) jwt.RefreshToken); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(jwt.RefreshToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, jwt.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *JWTIssuer) GetUserByRefreshToken(ctx context.Context, refreshToken uuid.UUID) (jwt.User, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByRefreshToken")
	}

	var r0 jwt.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (jwt.User, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) jwt.User); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(jwt.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InactivateRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *JWTIssuer) InactivateRefreshToken(ctx context.Context, refreshToken uuid.UUID) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for InactivateRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// New provides a mock function with given fields: ctx, user
func (_m *JWTIssuer) New(ctx context.Context, user jwt.User) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, jwt.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, jwt.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, jwt.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJWTIssuer creates a new instance of JWTIssuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTIssuer(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTIssuer {
	mock := &JWTIssuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
