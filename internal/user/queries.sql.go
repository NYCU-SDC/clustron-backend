// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package user

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO users (email, student_id, updated_at) VALUES ($1, $2, now()) RETURNING id, email, role, department, student_id, created_at, updated_at
`

type CreateParams struct {
	Email     string
	StudentID pgtype.Text
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (User, error) {
	row := q.db.QueryRow(ctx, create, arg.Email, arg.StudentID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.Department,
		&i.StudentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :execrows
DELETE FROM users WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, delete, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const existsByEmail = `-- name: ExistsByEmail :one
SELECT EXISTS (
    SELECT 1 FROM users WHERE email = $1
) AS email_exists
`

func (q *Queries) ExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, existsByEmail, email)
	var email_exists bool
	err := row.Scan(&email_exists)
	return email_exists, err
}

const getByEmail = `-- name: GetByEmail :one
SELECT id, email, role, department, student_id, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.Department,
		&i.StudentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getByID = `-- name: GetByID :one
SELECT id, email, role, department, student_id, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.Department,
		&i.StudentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateName = `-- name: UpdateName :one
UPDATE users SET username = $2, updated_at = now() WHERE id = $1 RETURNING id, username, email, role, department, student_id, created_at, updated_at
`

type UpdateNameParams struct {
	ID       uuid.UUID
	Username string
}

func (q *Queries) UpdateName(ctx context.Context, arg UpdateNameParams) (User, error) {
	row := q.db.QueryRow(ctx, updateName, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.Department,
		&i.StudentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
