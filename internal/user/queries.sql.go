// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package user

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO users (email, role, student_id, updated_at) VALUES ($1, $2, $3, now()) RETURNING id, email, role, student_id, uid_number, created_at, updated_at
`

type CreateParams struct {
	Email     string
	Role      string
	StudentID pgtype.Text
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (User, error) {
	row := q.db.QueryRow(ctx, create, arg.Email, arg.Role, arg.StudentID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.StudentID,
		&i.UidNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createWithID = `-- name: CreateWithID :one
INSERT INTO users (id, email, role, student_id, updated_at)
VALUES ($1, $2, $3, $4, now())
RETURNING id, email, role, student_id, uid_number, created_at, updated_at
`

type CreateWithIDParams struct {
	ID        uuid.UUID
	Email     string
	Role      string
	StudentID pgtype.Text
}

func (q *Queries) CreateWithID(ctx context.Context, arg CreateWithIDParams) (User, error) {
	row := q.db.QueryRow(ctx, createWithID,
		arg.ID,
		arg.Email,
		arg.Role,
		arg.StudentID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.StudentID,
		&i.UidNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :execrows
DELETE FROM users WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, delete, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const existsByIdentifier = `-- name: ExistsByIdentifier :one
SELECT EXISTS (
    SELECT 1 FROM users WHERE email = $1 OR student_id = $1
) AS email_exists
`

func (q *Queries) ExistsByIdentifier(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, existsByIdentifier, email)
	var email_exists bool
	err := row.Scan(&email_exists)
	return email_exists, err
}

const getByEmail = `-- name: GetByEmail :one
SELECT id, email, role, student_id, uid_number, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.StudentID,
		&i.UidNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getByID = `-- name: GetByID :one
SELECT id, email, role, student_id, uid_number, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.StudentID,
		&i.UidNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmailByID = `-- name: GetEmailByID :one
SELECT email FROM users WHERE id = $1
`

func (q *Queries) GetEmailByID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getEmailByID, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getIdByEmail = `-- name: GetIdByEmail :one
SELECT id FROM users WHERE email = $1
`

func (q *Queries) GetIdByEmail(ctx context.Context, email string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getIdByEmail, email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getIdByStudentId = `-- name: GetIdByStudentId :one
SELECT id FROM users WHERE student_id = $1
`

func (q *Queries) GetIdByStudentId(ctx context.Context, studentID pgtype.Text) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getIdByStudentId, studentID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT role FROM users WHERE id = $1
`

func (q *Queries) GetRoleByID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var role string
	err := row.Scan(&role)
	return role, err
}

const listUidNumbers = `-- name: ListUidNumbers :many
SELECT uid_number FROM users WHERE uid_number IS NOT NULL ORDER BY uid_number
`

func (q *Queries) ListUidNumbers(ctx context.Context) ([]pgtype.Int4, error) {
	rows, err := q.db.Query(ctx, listUidNumbers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Int4
	for rows.Next() {
		var uid_number pgtype.Int4
		if err := rows.Scan(&uid_number); err != nil {
			return nil, err
		}
		items = append(items, uid_number)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE users SET role = $2, updated_at = now() WHERE id = $1 RETURNING id, email, role, student_id, uid_number, created_at, updated_at
`

type UpdateRoleParams struct {
	ID   uuid.UUID
	Role string
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (User, error) {
	row := q.db.QueryRow(ctx, updateRole, arg.ID, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.StudentID,
		&i.UidNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
